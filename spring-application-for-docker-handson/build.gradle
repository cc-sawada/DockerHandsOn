plugins {
  id 'org.springframework.boot' version '2.5.4'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
}

group = 'com.example'
version = '0.0.1'
sourceCompatibility = '11'

// DOMA関係
// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir
// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources
// テンポラリディレクトリのパスを定義する
ext.domaResourcesDir = "${buildDir}/tmp/doma-resources"
// domaが注釈処理で参照するリソースをテンポラリディレクトリに抽出
task extractDomaResources(type: Copy, dependsOn: processResources) {
  from processResources.destinationDir
  include 'doma.compile.config'
  include 'META-INF/**/*.sql'
  include 'META-INF/**/*.script'
  into domaResourcesDir
}
// テンポラリディレクトリ内のリソースをcompileJavaタスクの出力先ディレクトリにコピーする
task copyDomaResources(type: Copy, dependsOn: extractDomaResources) {
  from domaResourcesDir
  into compileJava.destinationDir
}
compileJava {
  // 上述のタスクに依存させる
  dependsOn copyDomaResources
  // テンポラリディレクトリをcompileJavaタスクの入力ディレクトリに設定する
  inputs.dir domaResourcesDir
  options.encoding = 'UTF-8'
}
compileTestJava {
  options.encoding = 'UTF-8'
  // テストの実行時は注釈処理を無効にする
  options.compilerArgs = ['-proc:none']
}

repositories {
  mavenCentral()
}

dependencies {
  // domaの注釈処理を実行することを示す
  annotationProcessor "org.seasar.doma:doma:2.20.0"
  // domaへの依存を示す
  implementation "org.seasar.doma:doma:2.20.0"
  implementation "org.seasar.doma.boot:doma-spring-boot-starter:1.5.0"
  // MySQLのJDBCドライバーを使えるようにする
  runtimeOnly 'mysql:mysql-connector-java'

  implementation 'org.springframework.boot:spring-boot-starter-web'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

test {
  useJUnitPlatform()
}

bootJar {
  duplicatesStrategy = DuplicatesStrategy.WARN
}